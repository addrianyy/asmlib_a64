@(Register rd, Register rn, uint64_t imm) {
  add
  adds
  sub
  subs
}
@(Register rn, uint64_t imm) {
  cmp
  cmn
}

@(Register rd, Register rn, uint64_t imm) {
  and_
  ands
  eor
  orr
}
tst(Register rn, uint64_t imm)

@(Register rd, uint64_t imm, uint64_t shift = 0) {
  movz
  movk
  movn
}

mov(Register rd, uint64_t imm)

@(Register rd, Label label) {
  adr
  adrp
}

@(Register rd, Register rn, uint64_t immr, uint64_t imms) {
  bfm
  sbfm
  ubfm
}

bfc(Register rd, uint64_t lsb, uint64_t width)
@(Register rd, Register rn, uint64_t lsb, uint64_t width) {
  bfi
  bfxil
  sbfiz
  sbfx
  ubfiz
  ubfx
}

extr(Register rd, Register rn, Register rm, uint64_t lsb)

@(Register rd, Register rn, uint64_t shift) {
  asr
  lsl
  lsr
  ror
}

@(Register rd, Register rn) {
  sxtb
  sxth
  sxtw
  uxtb
  uxth
}

@(Register rd, Register rn, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl) {
  add
  adds
  sub
  subs
}
@(Register rn, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl) {
  cmp
  cmn
}
@(Register rd, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl) {
  neg
  negs
}

@(Register rd, Register rn, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl) {
  and_
  ands
  bic
  bics
  eor
  eon
  orr
  orn
}
mvn(Register rd, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl)
tst(Register rn, Register rm, uint64_t shift_amount = 0, Shift shift = Shift::Lsl)



mov(Register rd, Register rn)

@(Register rd, Register rn, Register rm) {
  asr
  lsl
  lsr
  ror
}

@(Register rd, Register rn, Register rm, Register ra) {
  madd
  msub
}
@(Register rd, Register rn, Register rm) {
  mneg
  mul
}

@(Register rd, Register rn, Register rm) {
  sdiv
  udiv
}

@(Register rd, Register rn) {
  cls
  clz
}

@(Register rd, Register rn, Register rm, Condition condition) {
  csel
  csinc
}
cset(Register rd, Condition condition)

@(Register rt, Register rn, int64_t imm, Writeback writeback = Writeback::None) {
  ldr
  ldrh
  ldrb
  ldrsw
  ldrsh
  ldrsb

  str
  strh
  strb
}

@(Register rt, Register rn, Register rm, Scale scale = Scale::None, Extend extend = Extend::Lsl) {
  ldr
  ldrh
  ldrb
  ldrsw
  ldrsh
  ldrsb

  str
  strh
  strb
}

@(Register rt, Label label) {
  ldr
  ldrsw
}

@(Register rt1, Register rt2, Register rn, int64_t imm, Writeback writeback = Writeback::None) {
  ldp
  ldpsw
}

@(Register rt, Register rn) {
  ldar
  ldarb
  ldarh
  stlr
  stlrb
  stlrh
}

stp(Register rt1, Register rt2, Register rn, int64_t imm, Writeback writeback = Writeback::None)

b(Condition condition, Label label)
cbz(Register rt, Label label)
cbnz(Register rt, Label label)
tbz(Register rt, uint64_t bit, Label label)
tbnz(Register rt, uint64_t bit, Label label)

b(Label label)
bl(Label label)

blr(Register rn)
br(Register rn)
ret(Register rn = Register::X30)

svc(uint16_t imm)
brk(uint16_t imm)